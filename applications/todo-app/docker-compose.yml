services:
  # PostgreSQL Database (same for both dev and prod)
  database:
    image: postgres:15-alpine
    container_name: gitops-database
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gitops_user -d gitops_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gitops-network

  # Backend API (Development with hot reloading)
  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile
    container_name: gitops-backend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${PORT:-3001}
      DB_HOST: ${DB_HOST:-database}
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3001:3001"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - gitops-network
    volumes:
      - ./src/backend:/app
      - /app/node_modules

  # Frontend (Development with hot reloading)
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    container_name: gitops-frontend
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3001}
      CHOKIDAR_USEPOLLING: "true"
      WATCHPACK_POLLING: "true"
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - gitops-network
    volumes:
      - ./src/frontend:/app
      - /app/node_modules
      - /app/.next

volumes:
  postgres_data:

networks:
  gitops-network:
    driver: bridge
